// DEBUG STEPS FOR WHATSAPP BOT NOT RESPONDING TO COMMANDS

// =================
// STEP 1: CHECK YOUR .env CONFIGURATION
// =================

// Your current .env shows:
// OWNER_NUMBER=23481116374763
// ADMIN_NUMBERS=2348111637463,2348089782988

// PROBLEM 1: Inconsistent phone numbers
// Your OWNER_NUMBER: 23481116374763 (14 digits)
// Your ADMIN_NUMBERS: 2348111637463 (13 digits), 2348089782988 (13 digits)

// FIX: Ensure all numbers have the same format
// Option A: Use 13-digit format (recommended for Nigerian numbers)
OWNER_NUMBER=2348111637463
ADMIN_NUMBERS=2348111637463,2348089782988

// Option B: Use 14-digit format (if that's the correct format)
// OWNER_NUMBER=23481116374763
// ADMIN_NUMBERS=23481116374763,23480897829880

// =================
// STEP 2: ADD DEBUG LOGGING TO MESSAGE HANDLER
// =================

// Add this to your messageHandler.js processMessage method (around line 120):
console.log('\n=== MESSAGE DEBUG ===');
console.log('Raw Message:', JSON.stringify(message, null, 2));
console.log('Message Text:', messageText);
console.log('Sender ID:', senderId);
console.log('Parsed Command:', parseCommand(messageText));
console.log('Is from me:', message.key.fromMe);
console.log('Remote JID:', message.key.remoteJid);
console.log('====================\n');

// =================
// STEP 3: FIX THE PERMISSION CHECKING
// =================

// Replace your isOwner and isAdmin checks in helpers.js with this improved version:

export function isOwner(senderId) {
    if (!config.OWNER_NUMBER) {
        logger.debug('No OWNER_NUMBER configured');
        return false;
    }
    
    // Skip our own messages
    if (senderId === 'me') return true;
    
    // Extract phone number from different JID formats
    let senderPhone = '';
    
    if (senderId.includes('@')) {
        // Format: 2348111637463@s.whatsapp.net
        senderPhone = senderId.split('@')[0];
    } else {
        senderPhone = senderId;
    }
    
    // Remove any non-digits
    senderPhone = senderPhone.replace(/\D/g, '');
    const ownerPhone = config.OWNER_NUMBER.toString().replace(/\D/g, '');
    
    // Try different comparison methods
    const comparisons = [
        senderPhone === ownerPhone,
        senderPhone.endsWith(ownerPhone.slice(-10)), // Last 10 digits
        ownerPhone.endsWith(senderPhone.slice(-10)),
        senderPhone.slice(-11) === ownerPhone.slice(-11) // Last 11 digits
    ];
    
    const result = comparisons.some(Boolean);
    
    console.log('=== OWNER CHECK DEBUG ===');
    console.log('Sender Phone:', senderPhone);
    console.log('Owner Phone:', ownerPhone);
    console.log('Comparisons:', comparisons);
    console.log('Result:', result);
    console.log('========================');
    
    return result;
}

export function isAdmin(senderId) {
    // Owner is always admin
    if (isOwner(senderId)) return true;
    
    if (!config.ADMIN_NUMBERS || config.ADMIN_NUMBERS.length === 0) {
        return false;
    }
    
    // Skip our own messages
    if (senderId === 'me') return true;
    
    // Extract phone number
    let senderPhone = '';
    if (senderId.includes('@')) {
        senderPhone = senderId.split('@')[0];
    } else {
        senderPhone = senderId;
    }
    
    senderPhone = senderPhone.replace(/\D/g, '');
    
    const result = config.ADMIN_NUMBERS.some(adminNum => {
        const adminPhone = adminNum.toString().replace(/\D/g, '');
        return senderPhone === adminPhone || 
               senderPhone.endsWith(adminPhone.slice(-10)) ||
               adminPhone.endsWith(senderPhone.slice(-10));
    });
    
    console.log('=== ADMIN CHECK DEBUG ===');
    console.log('Sender Phone:', senderPhone);
    console.log('Admin Numbers:', config.ADMIN_NUMBERS);
    console.log('Result:', result);
    console.log('========================');
    
    return result;
}

// =================
// STEP 4: TEMPORARY BYPASS FOR TESTING
// =================

// Add this temporary bypass to your messageHandler.js (in the processMessage method, before the plugin check):

// TEMPORARY: Allow all users for testing (REMOVE AFTER FIXING)
console.log('=== TESTING BYPASS ACTIVE ===');
console.log('Allowing all users for debugging purposes');

// Comment out or modify the permission checks in your plugins temporarily
// For example, in ping.js, admin.js, etc., temporarily remove permission checks

// =================
// STEP 5: CREATE A SIMPLE TEST COMMAND
// =================

// Add this simple test plugin to your messageHandler.js plugins:

const testPlugin = {
    name: 'test',
    description: 'Simple test command',
    usage: '!test',
    category: 'debug',
    
    async execute(context) {
        const { reply, senderId } = context;
        
        console.log('TEST COMMAND EXECUTED!');
        console.log('Sender:', senderId);
        console.log('Is Owner:', isOwner(senderId));
        console.log('Is Admin:', isAdmin(senderId));
        
        await reply(`âœ… Test successful!\nSender: ${senderId}\nTime: ${new Date()}`);
    }
};

// Add it to your plugins in loadPlugins():
this.plugins.set('test', testPlugin);

// =================
// STEP 6: CHECK MESSAGE PROCESSING FLOW
// =================

// Add these console.log statements throughout your messageHandler.js:

async processMessage(message) {
    try {
        console.log('1. Processing message...');
        
        // Skip if message is from status broadcast
        if (message.key.remoteJid === 'status@broadcast') {
            console.log('2. Skipping status broadcast');
            return;
        }
        
        // Skip if no message content
        if (!message.message) {
            console.log('3. No message content');
            return;
        }
        
        // Get message text
        const messageText = getMessageContent(message.message);
        if (!messageText) {
            console.log('4. Could not extract message text');
            return;
        }
        
        console.log('5. Message text:', messageText);
        
        const senderId = getSenderId(message);
        console.log('6. Sender ID:', senderId);
        
        // Skip our own messages
        if (message.key.fromMe) {
            console.log('7. Skipping own message');
            return;
        }
        
        // Parse command
        const parsed = parseCommand(messageText);
        if (!parsed) {
            console.log('8. Not a command (no prefix)');
            return;
        }
        
        console.log('9. Parsed command:', parsed);
        
        const { command, args } = parsed;
        
        // Check if plugin exists
        const plugin = this.plugins.get(command);
        if (!plugin) {
            console.log('10. Plugin not found:', command);
            console.log('Available plugins:', Array.from(this.plugins.keys()));
            return;
        }
        
        console.log('11. Executing plugin:', plugin.name);
        
        // Execute plugin
        await plugin.execute(context);
        
        console.log('12. Plugin executed successfully');
        
    } catch (error) {
        console.error('ERROR in processMessage:', error);
        logger.error('Error processing message:', error);
    }
}

// =================
// STEP 7: CORRECTED .ENV VALUES
// =================

// Based on your config, use these corrected values:

BOT_NAME=Groq ðŸ¤–
PREFIX=.
TIMEZONE=Africa/Lagos

# Use consistent 13-digit format for Nigerian numbers
OWNER_NUMBER=2348111637463
ADMIN_NUMBERS=2348111637463,2348089782988

# Your session settings (keep as is if working)
SESSION_STRING="Groq~Tn5XGTrD#2_aebxYYlfmKaXLRRz0FldnlCpzQAdckRzBx0rtlZQA"
SESSION_ID=Groq

SEND_STARTUP_MESSAGE=true
AUTO_RESTART_ON_LOGOUT=false

# Enable all features for testing
ENABLE_WEATHER=true
ENABLE_JOKES=true  
ENABLE_QUOTES=true
ENABLE_CALCULATOR=true
ENABLE_ADMIN_COMMANDS=true
ENABLE_GROUP_EVENTS=true
ENABLE_ECONOMY=true
ENABLE_ATTENDANCE=true

# MongoDB (optional - you have fallback)
MONGODB_URI=mongodb+srv://macksyn:mygroqdatabase1234@groq.lm0dims.mongodb.net/?retryWrites=true&w=majority&appName=Groq

NODE_ENV=production
PORT=8000
LOG_LEVEL=debug
LOG_TO_FILE=true

// =================
// STEP 8: QUICK TEST SEQUENCE
// =================

// 1. Update your .env with the corrected values above
// 2. Add the debug console.log statements
// 3. Restart your bot
// 4. Send these test messages from your WhatsApp:
//    - ".ping" 
//    - ".test"
//    - ".help"
//    - ".testperms"

// 5. Check your console logs for the debug output
// 6. The logs will show you exactly where the command processing is failing

// =================
// MOST LIKELY ISSUES:
// =================

// 1. Phone number format mismatch between OWNER_NUMBER and your actual WhatsApp number
// 2. Bot is ignoring its own messages (check if message.key.fromMe is true)
// 3. Session authentication issue causing message handling to fail
// 4. Rate limiting blocking your commands
// 5. Plugin execution failing due to permission checks

// =================
// IMMEDIATE FIXES TO TRY:
// =================

// 1. Fix phone number in .env:
//    OWNER_NUMBER=2348111637463  (remove extra digit)

// 2. Add this bypass to messageHandler.js temporarily:
//    Comment out the rate limit check:
//    // if (!checkRateLimit(senderId)) { ... }

// 3. Add more debug logging as shown above

// 4. Test with the simple commands first: .ping, .test, .help

// The startup message working confirms your session is good, 
// so the issue is definitely in the command processing logic.
