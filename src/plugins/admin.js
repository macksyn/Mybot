import { config } from '../config/config.js';
import { formatDuration, getCurrentTime } from '../utils/helpers.js';

export default {
    name: 'admin',
    description: 'Admin control panel and system management',
    usage: `${config.PREFIX}admin [action]`,
    category: 'admin',
    adminOnly: true,
    
    async execute(context) {
        const { reply, args, react, isOwner, isAdmin } = context;
        
        if (!isAdmin && !isOwner) {
            await reply('üîí *Access Denied*\n\nThis command requires administrator privileges.');
            return;
        }
        
        await react('‚öôÔ∏è');
        
        const action = args[0]?.toLowerCase();
        
        switch (action) {
            case 'status':
            case 'info':
                await this.showSystemStatus(context);
                break;
                
            case 'restart':
                if (!isOwner) {
                    await reply('üîí *Owner Only*\n\nOnly the bot owner can restart the system.');
                    return;
                }
                await this.restartBot(context);
                break;
                
            case 'stats':
                await this.showStats(context);
                break;
                
            case 'session':
                await this.showSessionInfo(context);
                break;
                
            case 'config':
                await this.showConfig(context);
                break;
                
            case 'help':
                await this.showAdminHelp(context);
                break;
                
            default:
                await this.showAdminPanel(context);
                break;
        }
    },
    
    async showAdminPanel(context) {
        const { reply, isOwner } = context;
        
        let response = '‚öôÔ∏è *Admin Control Panel*\n\n';
        
        response += 'üìä *Available Actions:*\n';
        response += `‚Ä¢ ${config.PREFIX}admin status - System status\n`;
        response += `‚Ä¢ ${config.PREFIX}admin stats - Bot statistics\n`;
        response += `‚Ä¢ ${config.PREFIX}admin session - Session info\n`;
        response += `‚Ä¢ ${config.PREFIX}admin config - Configuration\n`;
        response += `‚Ä¢ ${config.PREFIX}admin help - Admin help\n`;
        
        if (isOwner) {
            response += `‚Ä¢ ${config.PREFIX}admin restart - Restart bot\n`;
        }
        
        response += '\n';
        response += 'üîß *Quick System Info:*\n';
        response += `‚Ä¢ Uptime: ${formatDuration(process.uptime() * 1000)}\n`;
        response += `‚Ä¢ Memory: ${Math.round(process.memoryUsage().heapUsed / 1024 / 1024)}MB\n`;
        response += `‚Ä¢ Node.js: ${process.version}\n`;
        response += `‚Ä¢ Environment: ${config.NODE_ENV}\n\n`;
        
        response += 'üí° Use specific commands above for detailed information.';
        
        await reply(response);
    },
    
    async showSystemStatus(context) {
        const { reply } = context;
        
        const uptime = process.uptime() * 1000;
        const memUsage = process.memoryUsage();
        
        let response = 'üìä *System Status Report*\n\n';
        
        // System Health
        response += 'üñ•Ô∏è *System Health:*\n';
        response += `‚Ä¢ Status: üü¢ Operational\n`;
        response += `‚Ä¢ Uptime: ${formatDuration(uptime)}\n`;
        response += `‚Ä¢ CPU Usage: ${await getCpuUsage()}%\n`;
        response += `‚Ä¢ Platform: ${process.platform} (${process.arch})\n\n`;
        
        // Memory Usage
        response += 'üíæ *Memory Usage:*\n';
        response += `‚Ä¢ Heap Used: ${Math.round(memUsage.heapUsed / 1024 / 1024)}MB\n`;
        response += `‚Ä¢ Heap Total: ${Math.round(memUsage.heapTotal / 1024 / 1024)}MB\n`;
        response += `‚Ä¢ RSS: ${Math.round(memUsage.rss / 1024 / 1024)}MB\n`;
        response += `‚Ä¢ External: ${Math.round(memUsage.external / 1024 / 1024)}MB\n\n`;
        
        // Runtime Info
        response += '‚öôÔ∏è *Runtime Information:*\n';
        response += `‚Ä¢ Node.js: ${process.version}\n`;
        response += `‚Ä¢ Environment: ${config.NODE_ENV}\n`;
        response += `‚Ä¢ Process ID: ${process.pid}\n`;
        response += `‚Ä¢ Current Time: ${getCurrentTime()}\n\n`;
        
        // Health Check
        const healthScore = calculateHealthScore(memUsage, uptime);
        response += `üè• *Health Score:* ${healthScore}/100\n`;
        response += getHealthStatus(healthScore);
        
        await reply(response);
    },
    
    async showStats(context) {
        const { reply } = context;
        
        // Note: In a real implementation, you'd track these statistics
        // For now, we'll show placeholder/calculated stats
        
        let response = 'üìà *Bot Statistics*\n\n';
        
        response += 'üìä *Usage Statistics:*\n';
        response += `‚Ä¢ Total Uptime: ${formatDuration(process.uptime() * 1000)}\n`;
        response += `‚Ä¢ Commands Executed: N/A (tracking disabled)\n`;
        response += `‚Ä¢ Messages Processed: N/A (tracking disabled)\n`;
        response += `‚Ä¢ Active Sessions: 1\n\n`;
        
        response += 'üîß *System Statistics:*\n';
        response += `‚Ä¢ Memory Peak: ${Math.round(process.memoryUsage().heapTotal / 1024 / 1024)}MB\n`;
        response += `‚Ä¢ Restart Count: N/A\n`;
        response += `‚Ä¢ Last Restart: Startup\n`;
        response += `‚Ä¢ Error Count: N/A\n\n`;
        
        response += 'üì± *WhatsApp Statistics:*\n';
        response += `‚Ä¢ Connection Status: Connected\n`;
        response += `‚Ä¢ Session Type: ${config.isUsingSessionString() ? 'Mega.nz' : 'File-based'}\n`;
        response += `‚Ä¢ Auth Method: ${config.isUsingSessionString() ? 'Session String' : 'File Auth'}\n`;
        response += `‚Ä¢ Session ID: ${config.SESSION_ID}\n\n`;
        
        response += 'üí° *Note:* Advanced statistics require database integration.';
        
        await reply(response);
    },
    
    async showSessionInfo(context) {
        const { reply } = context;
        
        let response = 'üîê *Session Information*\n\n';
        
        const sessionInfo = config.getSessionInfo();
        
        response += 'üìã *Current Session:*\n';
        response += `‚Ä¢ Session ID: ${config.SESSION_ID}\n`;
        response += `‚Ä¢ Auth Method: ${config.isUsingSessionString() ? 'Session String' : 'File-based'}\n`;
        
        if (config.isUsingSessionString()) {
            response += `‚Ä¢ String Length: ${config.SESSION_STRING.length} chars\n`;
            response += `‚Ä¢ Type: ${sessionInfo.type || 'Unknown'}\n`;
            
            if (sessionInfo.type === 'mega') {
                response += `‚Ä¢ Source: Mega.nz Cloud Storage\n`;
                response += `‚Ä¢ Prefix: ${sessionInfo.prefix || 'Unknown'}\n`;
            }
            
            if (sessionInfo.phoneNumber) {
                response += `‚Ä¢ Phone: ${sessionInfo.phoneNumber}\n`;
            }
        } else {
            response += `‚Ä¢ Session Path: ${config.getSessionPath()}\n`;
        }
        
        response += '\n';
        
        response += 'üîí *Security Status:*\n';
        response += `‚Ä¢ Session Valid: ‚úÖ Active\n`;
        response += `‚Ä¢ Connection: üü¢ Stable\n`;
        response += `‚Ä¢ Last Update: Active session\n\n`;
        
        response += '‚öôÔ∏è *Session Actions:*\n';
        response += `‚Ä¢ Test: ${config.PREFIX}sessiontest\n`;
        response += `‚Ä¢ Info: ${config.PREFIX}admin session\n`;
        response += '‚Ä¢ Backup: Auto-saved to local files\n\n';
        
        response += 'üí° *Tip:* Regular session testing ensures stability.';
        
        await reply(response);
    },
    
    async showConfig(context) {
        const { reply } = context;
        
        let response = 'üîß *Bot Configuration*\n\n';
        
        response += 'üìù *Basic Settings:*\n';
        response += `‚Ä¢ Bot Name: ${config.BOT_NAME}\n`;
        response += `‚Ä¢ Prefix: ${config.PREFIX}\n`;
        response += `‚Ä¢ Timezone: ${config.TIMEZONE}\n`;
        response += `‚Ä¢ Environment: ${config.NODE_ENV}\n`;
        response += `‚Ä¢ Log Level: ${config.LOG_LEVEL}\n\n`;
        
        response += 'üë• *Access Control:*\n';
        response += `‚Ä¢ Owner: ${config.OWNER_NUMBER ? '‚úÖ Set' : '‚ùå Not Set'}\n`;
        response += `‚Ä¢ Admins: ${config.ADMIN_NUMBERS.length} configured\n`;
        response += `‚Ä¢ Rate Limit: ${config.MAX_COMMANDS_PER_MINUTE}/min\n\n`;
        
        response += '‚ú® *Feature Status:*\n';
        response += `‚Ä¢ Weather: ${config.ENABLE_WEATHER ? '‚úÖ' : '‚ùå'}\n`;
        response += `‚Ä¢ Jokes: ${config.ENABLE_JOKES ? '‚úÖ' : '‚ùå'}\n`;
        response += `‚Ä¢ Quotes: ${config.ENABLE_QUOTES ? '‚úÖ' : '‚ùå'}\n`;
        response += `‚Ä¢ Calculator: ${config.ENABLE_CALCULATOR ? '‚úÖ' : '‚ùå'}\n`;
        response += `‚Ä¢ Admin Commands: ${config.ENABLE_ADMIN_COMMANDS ? '‚úÖ' : '‚ùå'}\n`;
        response += `‚Ä¢ Auto React: ${config.ENABLE_AUTO_REACT ? '‚úÖ' : '‚ùå'}\n\n`;
        
        response += 'üîë *API Keys:*\n';
        response += `‚Ä¢ OpenWeather: ${config.OPENWEATHER_API_KEY ? '‚úÖ Set' : '‚ùå Not Set'}\n`;
        response += `‚Ä¢ Quotes API: ${config.QUOTE_API_KEY ? '‚úÖ Set' : '‚ùå Not Set'}\n\n`;
        
        response += '‚öôÔ∏è *System Settings:*\n';
        response += `‚Ä¢ Port: ${config.PORT}\n`;
        response += `‚Ä¢ Log to File: ${config.LOG_TO_FILE ? '‚úÖ' : '‚ùå'}\n`;
        response += `‚Ä¢ Startup Message: ${config.SEND_STARTUP_MESSAGE ? '‚úÖ' : '‚ùå'}\n`;
        response += `‚Ä¢ Auto Restart: ${config.AUTO_RESTART_ON_LOGOUT ? '‚úÖ' : '‚ùå'}`;
        
        await reply(response);
    },
    
    async showAdminHelp(context) {
        const { reply, isOwner } = context;
        
        let response = 'üìñ *Admin Commands Help*\n\n';
        
        response += 'üîß *Available Commands:*\n\n';
        
        response += `*${config.PREFIX}admin status*\n`;
        response += '‚Ä¢ Show detailed system status\n';
        response += '‚Ä¢ Memory usage, uptime, health\n\n';
        
        response += `*${config.PREFIX}admin stats*\n`;
        response += '‚Ä¢ Bot usage statistics\n';
        response += '‚Ä¢ Performance metrics\n\n';
        
        response += `*${config.PREFIX}admin session*\n`;
        response += '‚Ä¢ Current session information\n';
        response += '‚Ä¢ Security status\n\n';
        
        response += `*${config.PREFIX}admin config*\n`;
        response += '‚Ä¢ Bot configuration overview\n';
        response += '‚Ä¢ Feature status, API keys\n\n';
        
        if (isOwner) {
            response += `*${config.PREFIX}admin restart* ‚ö†Ô∏è\n`;
            response += '‚Ä¢ Restart the bot (Owner only)\n';
            response += '‚Ä¢ Use with caution\n\n';
        }
        
        response += 'üìä *Related Commands:*\n';
        response += `‚Ä¢ ${config.PREFIX}sessiontest - Test session\n`;
        response += `‚Ä¢ ${config.PREFIX}info - Basic bot info\n`;
        response += `‚Ä¢ ${config.PREFIX}ping - Check response time\n\n`;
        
        response += 'üí° *Tips:*\n';
        response += '‚Ä¢ Regular status checks help maintain bot health\n';
        response += '‚Ä¢ Monitor memory usage for optimal performance\n';
        response += '‚Ä¢ Test session periodically for stability';
        
        await reply(response);
    },
    
    async restartBot(context) {
        const { reply } = context;
        
        await reply('üîÑ *Restarting Bot...*\n\n' +
                   'The bot will restart in 3 seconds.\n' +
                   'This may take a moment to complete.\n\n' +
                   '‚ö†Ô∏è *Please wait for reconnection...*');
        
        // Give time for the message to send
        setTimeout(() => {
            process.exit(0); // Let PM2 or process manager restart
        }, 3000);
    }
};

// Helper functions
async function getCpuUsage() {
    return new Promise((resolve) => {
        const startUsage = process.cpuUsage();
        setTimeout(() => {
            const currentUsage = process.cpuUsage(startUsage);
            const totalUsage = currentUsage.user + currentUsage.system;
            const percentage = (totalUsage / 1000000) * 100; // Convert to percentage
            resolve(Math.min(Math.round(percentage), 100));
        }, 100);
    });
}

function calculateHealthScore(memUsage, uptime) {
    let score = 100;
    
    // Memory usage penalty
    const memUsageMB = memUsage.heapUsed / 1024 / 1024;
    if (memUsageMB > 500) score -= 20;
    else if (memUsageMB > 200) score -= 10;
    else if (memUsageMB > 100) score -= 5;
    
    // Uptime bonus
    const uptimeHours = uptime / (1000 * 60 * 60);
    if (uptimeHours > 24) score += 5;
    if (uptimeHours > 168) score += 5; // 1 week
    
    return Math.max(0, Math.min(100, score));
}

function getHealthStatus(score) {
    if (score >= 90) return 'üíö Excellent - System running optimally';
    if (score >= 75) return 'üíõ Good - System performing well';
    if (score >= 60) return 'üß° Fair - Minor issues detected';
    if (score >= 40) return '‚ù§Ô∏è Poor - System needs attention';
    return 'üíî Critical - Immediate action required';
}
