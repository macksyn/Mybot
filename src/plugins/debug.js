import { isAdmin, isOwner, extractPhoneFromJid, normalizePhoneNumber, debugUserPermissions } from '../utils/helpers.js';
import { config } from '../config/config.js';

export default {
    name: 'debug',
    description: 'Debug user permissions and bot configuration',
    usage: '!debug [permissions|config|me]',
    category: 'debug',
    
    async execute(context) {
        const { reply, args, senderId, message } = context;
        
        if (args.length === 0) {
            await this.showDebugMenu(reply, senderId);
            return;
        }
        
        const subcommand = args[0].toLowerCase();
        
        switch (subcommand) {
            case 'permissions':
            case 'perms':
                await this.debugPermissions(reply, senderId);
                break;
            case 'config':
                await this.debugConfig(reply, senderId);
                break;
            case 'me':
                await this.debugUser(reply, senderId, message);
                break;
            default:
                await reply(`‚ùå Unknown debug command: *${subcommand}*\n\nUse *${config.PREFIX}debug* to see available options.`);
        }
    },
    
    async showDebugMenu(reply, senderId) {
        const isOwnerUser = isOwner(senderId);
        const isAdminUser = isAdmin(senderId);
        
        const debugText = `üîç *Debug Menu*\n\n` +
                         `üë§ *Your Status:*\n` +
                         `‚Ä¢ Owner: ${isOwnerUser ? '‚úÖ' : '‚ùå'}\n` +
                         `‚Ä¢ Admin: ${isAdminUser ? '‚úÖ' : '‚ùå'}\n\n` +
                         `üìã *Available Commands:*\n\n` +
                         `‚Ä¢ *permissions* - Check permission details\n` +
                         `‚Ä¢ *config* - Show configuration ${isOwnerUser ? '' : '(owner only)'}\n` +
                         `‚Ä¢ *me* - Show your user details\n\n` +
                         `üí° *Usage:* ${config.PREFIX}debug [command]`;
        
        await reply(debugText);
    },
    
    async debugPermissions(reply, senderId) {
        // Extract and normalize phone numbers
        const senderPhone = extractPhoneFromJid(senderId);
        const normalizedSender = normalizePhoneNumber(senderPhone);
        const normalizedOwner = normalizePhoneNumber(config.OWNER_NUMBER);
        
        // Permission checks
        const isOwnerUser = isOwner(senderId);
        const isAdminUser = isAdmin(senderId);
        
        // Admin number checks
        let adminMatches = [];
        if (config.ADMIN_NUMBERS && config.ADMIN_NUMBERS.length > 0) {
            adminMatches = config.ADMIN_NUMBERS.map(adminNum => {
                const normalizedAdmin = normalizePhoneNumber(adminNum);
                return {
                    original: adminNum,
                    normalized: normalizedAdmin,
                    matches: normalizedAdmin === normalizedSender
                };
            });
        }
        
        const debugText = `üîç *Permission Debug*\n\n` +
                         `üë§ *Your Details:*\n` +
                         `‚Ä¢ Sender ID: \`${senderId}\`\n` +
                         `‚Ä¢ Phone: \`${senderPhone}\`\n` +
                         `‚Ä¢ Normalized: \`${normalizedSender}\`\n\n` +
                         `üëë *Owner Check:*\n` +
                         `‚Ä¢ Config Owner: \`${config.OWNER_NUMBER}\`\n` +
                         `‚Ä¢ Normalized: \`${normalizedOwner}\`\n` +
                         `‚Ä¢ Is Owner: ${isOwnerUser ? '‚úÖ' : '‚ùå'}\n` +
                         `‚Ä¢ Match: ${normalizedOwner === normalizedSender ? '‚úÖ' : '‚ùå'}\n\n` +
                         `üë• *Admin Check:*\n` +
                         `‚Ä¢ Is Admin: ${isAdminUser ? '‚úÖ' : '‚ùå'}\n` +
                         `‚Ä¢ Admin Count: ${config.ADMIN_NUMBERS.length}\n` +
                         (adminMatches.length > 0 ? 
                            adminMatches.map((admin, i) => 
                                `‚Ä¢ Admin ${i + 1}: \`${admin.original}\` ‚Üí \`${admin.normalized}\` ${admin.matches ? '‚úÖ' : '‚ùå'}`
                            ).join('\n') + '\n\n' : 
                            '‚Ä¢ No admin numbers configured\n\n'
                         ) +
                         `üîß *Recommendations:*\n` +
                         (!isOwnerUser && !isAdminUser ? 
                            `‚Ä¢ Add your number to ADMIN_NUMBERS or set as OWNER_NUMBER\n` +
                            `‚Ä¢ Use format: ${normalizedSender}\n` : 
                            `‚Ä¢ Permissions are working correctly! ‚úÖ\n`);
        
        // Log to console for debugging
        debugUserPermissions(senderId);
        
        await reply(debugText);
    },
    
    async debugConfig(reply, senderId) {
        // Only owner can see full config
        if (!isOwner(senderId)) {
            await reply('‚ùå Only the bot owner can view configuration details.');
            return;
        }
        
        const configText = `‚öôÔ∏è *Bot Configuration*\n\n` +
                          `ü§ñ *Basic Settings:*\n` +
                          `‚Ä¢ Name: ${config.BOT_NAME}\n` +
                          `‚Ä¢ Prefix: \`${config.PREFIX}\`\n` +
                          `‚Ä¢ Environment: ${config.NODE_ENV}\n` +
                          `‚Ä¢ Timezone: ${config.TIMEZONE}\n\n` +
                          `üë§ *Security:*\n` +
                          `‚Ä¢ Owner: \`${config.OWNER_NUMBER}\`\n` +
                          `‚Ä¢ Admins: \`${config.ADMIN_NUMBERS.join(', ')}\`\n` +
                          `‚Ä¢ Rate Limit: ${config.MAX_COMMANDS_PER_MINUTE}/min\n\n` +
                          `üîß *Features:*\n` +
                          `‚Ä¢ Admin Commands: ${config.ENABLE_ADMIN_COMMANDS ? '‚úÖ' : '‚ùå'}\n` +
                          `‚Ä¢ Weather: ${config.ENABLE_WEATHER ? '‚úÖ' : '‚ùå'}\n` +
                          `‚Ä¢ Jokes: ${config.ENABLE_JOKES ? '‚úÖ' : '‚ùå'}\n` +
                          `‚Ä¢ Quotes: ${config.ENABLE_QUOTES ? '‚úÖ' : '‚ùå'}\n` +
                          `‚Ä¢ Calculator: ${config.ENABLE_CALCULATOR ? '‚úÖ' : '‚ùå'}\n` +
                          `‚Ä¢ Economy: ${config.ENABLE_ECONOMY ? '‚úÖ' : '‚ùå'}\n` +
                          `‚Ä¢ Attendance: ${config.ENABLE_ATTENDANCE ? '‚úÖ' : '‚ùå'}\n\n` +
                          `üì± *Connection:*\n` +
                          `‚Ä¢ Pairing Code: ${config.USE_PAIRING_CODE ? '‚úÖ' : '‚ùå'}\n` +
                          `‚Ä¢ Startup Message: ${config.SEND_STARTUP_MESSAGE ? '‚úÖ' : '‚ùå'}\n` +
                          `‚Ä¢ Auto Restart: ${config.AUTO_RESTART_ON_LOGOUT ? '‚úÖ' : '‚ùå'}`;
        
        await reply(configText);
    },
    
    async debugUser(reply, senderId, message) {
        const senderPhone = extractPhoneFromJid(senderId);
        const normalizedSender = normalizePhoneNumber(senderPhone);
        const isOwnerUser = isOwner(senderId);
        const isAdminUser = isAdmin(senderId);
        const isGroup = message.key.remoteJid?.endsWith('@g.us');
        
        const userText = `üë§ *Your Information*\n\n` +
                        `üì± *Identity:*\n` +
                        `‚Ä¢ Sender ID: \`${senderId}\`\n` +
                        `‚Ä¢ Phone Number: \`${senderPhone}\`\n` +
                        `‚Ä¢ Normalized: \`${normalizedSender}\`\n` +
                        `‚Ä¢ Chat Type: ${isGroup ? 'Group' : 'Private'}\n\n` +
                        `üîê *Permissions:*\n` +
                        `‚Ä¢ Owner Status: ${isOwnerUser ? '‚úÖ Yes' : '‚ùå No'}\n` +
                        `‚Ä¢ Admin Status: ${isAdminUser ? '‚úÖ Yes' : '‚ùå No'}\n\n` +
                        `üí° *Quick Fix:*\n` +
                        `If you should have admin access, ask the bot owner to:\n` +
                        `1. Add \`${normalizedSender}\` to ADMIN_NUMBERS in .env\n` +
                        `2. Or set OWNER_NUMBER=\`${normalizedSender}\` in .env\n` +
                        `3. Restart the bot`;
        
        await reply(userText);
    }
};
